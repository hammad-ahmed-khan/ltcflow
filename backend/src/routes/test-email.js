// backend/src/routes/test-email.js
const Email = require("../models/Email");
const Config = require("../../config");
const validator = require("validator");
const isEmpty = require("../utils/isEmpty");

module.exports = async (req, res) => {
  try {
    const { email, subject, message } = req.fields;
    const companyId = req.headers["x-company-id"] || "test-company";

    // Validate input
    let errors = {};
    isEmpty(email) && (errors.email = "Email address required.");
    !validator.isEmail(email || "") &&
      (errors.email = "Valid email address required.");

    if (Object.keys(errors).length > 0) {
      return res.status(400).json(errors);
    }

    console.log("üß™ Creating test email for:", email);

    // Create test email entry
    const testEmail = new Email({
      companyId: companyId,
      from: Config.nodemailer.from || "test@example.com",
      to: email,
      subject: subject || "Test Email from LTC Flow",
      html:
        message ||
        `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #1976d2; margin: 0;">Email Test Successful!</h1>
          </div>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h2 style="color: #333; margin-top: 0;">‚úÖ Email System Working</h2>
            <p style="color: #666; line-height: 1.6;">
              If you're reading this email, your SMTP configuration is working correctly!
            </p>
            
            <ul style="color: #666; line-height: 1.6;">
              <li><strong>Test sent at:</strong> ${new Date().toLocaleString()}</li>
              <li><strong>SMTP Host:</strong> ${
                Config.nodemailer?.host || "Not configured"
              }</li>
              <li><strong>From address:</strong> ${
                Config.nodemailer?.from || "Not configured"
              }</li>
            </ul>
          </div>
          
          <div style="background-color: #e3f2fd; padding: 15px; border-radius: 6px; margin: 20px 0;">
            <p style="margin: 0; color: #1976d2; font-weight: 500;">
              üéâ Your email system is ready for production!
            </p>
          </div>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
          
          <p style="color: #999; font-size: 12px; text-align: center;">
            This is a test email generated by LTC Flow.<br>
            You can safely ignore this message.
          </p>
        </div>
      `,
      sent: false,
    });

    await testEmail.save();
    console.log("‚úÖ Test email saved to database with ID:", testEmail._id);

    // Check current email queue status
    const pendingEmails = await Email.countDocuments({ sent: false });
    const totalEmails = await Email.countDocuments();

    console.log(
      `üìä Email queue status: ${pendingEmails} pending, ${totalEmails} total`
    );

    res.status(200).json({
      status: "success",
      message: "Test email queued successfully!",
      details: {
        emailId: testEmail._id,
        to: email,
        subject: testEmail.subject,
        queuedAt: new Date(),
        pendingInQueue: pendingEmails,
        totalEmails: totalEmails,
        note: "Email will be sent by the cron job within 5 seconds if SMTP is configured.",
      },
      instructions: {
        checkLogs: "Watch server console for email sending logs",
        checkSpam: "If not received, check your spam folder",
        smtpStatus: Config.nodemailerEnabled ? "Enabled" : "Disabled",
        cronJob: "Runs every 5 seconds to send queued emails",
      },
    });
  } catch (error) {
    console.error("‚ùå Test email creation failed:", error);
    res.status(500).json({
      status: "error",
      error: "TEST_EMAIL_FAILED",
      message: "Failed to create test email",
      details: error.message,
    });
  }
};

// Alternative version with immediate sending (bypass queue)
// Uncomment this if you want to test SMTP directly without the queue system

/*
const sendMail = require("../utils/sendMail");

module.exports = async (req, res) => {
  try {
    const { email } = req.fields;
    
    if (!email || !validator.isEmail(email)) {
      return res.status(400).json({ error: "Valid email address required" });
    }

    console.log('üß™ Sending test email directly to:', email);

    // Send email immediately (bypass queue)
    const result = await sendMail({
      from: Config.nodemailer.from,
      to: email,
      subject: "Direct SMTP Test",
      html: `
        <h1>Direct SMTP Test Successful!</h1>
        <p>This email was sent directly via SMTP at ${new Date().toLocaleString()}</p>
        <p>Your email configuration is working correctly.</p>
      `
    });

    console.log('‚úÖ Direct email sent successfully:', result.messageId);

    res.status(200).json({
      status: "success",
      message: "Test email sent directly via SMTP",
      details: {
        messageId: result.messageId,
        to: email,
        sentAt: new Date()
      }
    });

  } catch (error) {
    console.error('‚ùå Direct email sending failed:', error);
    res.status(500).json({
      status: "error",
      message: "SMTP sending failed",
      error: error.message
    });
  }
};
*/
